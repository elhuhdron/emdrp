# The MIT License (MIT)
# 
# Copyright (c) 2016 Paul Watkins, National Institutes of Health / NINDS
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# ini specification file for supervoxel classifier
# File is meant to be read with configobj python module.
# http://www.voidspace.org.uk/python/articles/configobj.shtml
# 
# NOTE: as of version 5.0.6 inline comments do NOT work for specification lines
#   and types need at least ONE argument to not throw a validation error (for required vals, just specify min/max)
#
# Created on Dec 7, 2015, pwatkins

##############################
# Required options
##############################

# Input supervoxel labels (hdf5)
labelfile           = string(min=1)       

# Input probability data (hdf5)
probfile            = string(min=1)       

# Input segmented labels (hdf5)
gtfile              = string(min=1)                 

# Input raw EM data
rawfile             = string(min=1)

##############################
# Optional options
##############################

# Name of the supervoxel label dataset with subgroups
label_subgroups     = string_list(min=1, default=list(''))

# Name of the supervoxel label dataset with subgroups
label_subgroups_out = string_list(min=1, default=list('agglomeration'))

# Name of the ground truth label dataset
gt_dataset          = string(default='labels')

# Name of the raw EM dataset
raw_dataset         = string(default='data_mag1')

# Output agglomerated labels
outfile             = string(default='out.h5')

# Output training dataset
trainout            = string(default='out_train.dill')

# Output trained classifier
classifierout       = string(default='out_classifier.dill')

# Output testing dataset if single dataset
testout             = string(default='out_test.dill')

# Thresholds for probabilities
thresholds          = float_list(min=1, default=list(0.5))

# Names of thresholds subgroups to write in outputs (use empty to use thresholds).
# This is basically a hack to compare labels with different thresholds using legacy scripts.
threshold_subgroups = float_list(min=0, default=list())

# yes merge prior, use -1 for None (calculated by sklearn), only supported for discriminants
merge_prior         = float(min=-1.0, max=1.0, default=-1.0)

# specify number of iterations for iterative mode, use zero for normal mode
iterate_count       = integer(min=0, default=0)

# perform this percentage of mergers on each iteration, never go against sklearn predict().
# use -1 to use sklearn predict() only.
iterate_merge_perc  = float(min=-1.0, max=1.0, default=-1.0)

##############################
# Options for loading training / testing cubes
##############################

# Set these to use "chunklist" or "chunkrange" mode which loads cubes on-the-fly from different parts of the dataset.
# format is X1,Y1,Z1, X2,Y2,Z2, ...
chunk_range_beg     = int_list(min=0, default=list())    

# chunk_range_beg is set and end range is empty, then chunk_range_beg are assumed to be single chunks (chunklist mode)
# otherwise these are the ending chunks for the ranges and must be same length as chunk_range_beg (chunkrange mode)
# the range is open on the end, i.e., the chunk at chunk_range_end is NOT included
# format is X1,Y1,Z1, X2,Y2,Z2, ...
chunk_range_end     = int_list(min=0, default=list())    

# define offsets for "chunklist" mode, if the list is not the correct size, then use the first size for all sizes.
size_list           = int_list(min=3, default=list(128,128,128)) 

# define offsets for "chunklist" mode, if this list is empty, defaults to all zeros
# otherwise must be same length as chunk_range_beg/end (offsets per range for chunkrange or per chunk for chunklist)
# format is X1,Y1,Z1, X2,Y2,Z2, ...
offset_list         = int_list(min=3, default=list(0,0,0))    

# list of which chunks to use for test, all other chunks used for train, empty to train only.
# indexes into lists of chunk_range_beg/end (specify per chunk or per chunk range only)
test_chunks         = int_list(min=0, default=list())

# how many edges (total neighbors in region adjacency graph) to allocate per cube
nalloc_per_chunk    = integer(min=10, default=100000)

