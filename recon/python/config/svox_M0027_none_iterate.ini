
# dpSupervoxelClassifier.ini
# ini specification file for supervoxel classifier
# File is meant to be read with configobj python module.
# http://www.voidspace.org.uk/python/articles/configobj.shtml
# 
# NOTE: as of version 5.0.6 inline comments do NOT work for specification lines
#   and types need at least ONE argument to not throw a validation error (for required vals, just specify min/max)
#
# Created on Dec 7, 2015, pwatkins

##############################
# Required options
##############################

# Input supervoxel labels (hdf5)
#labelfile           = /Data/datasets/labels/supervoxels/sixfold_threed_20151006/none_supervoxels.h5
#labelfile           = /Data/watkinspv/full_datasets/neon_sixfold/mfergus32_ECSpaper_ctx/none_supervoxels.h5
labelfile           = /data/CDCU/full_datasets/neon_sixfold/mfergus32_ECSpaper_ctx/none_supervoxels.h5

# Input probability data (hdf5)
#probfile            = /Data/datasets/labels/supervoxels/sixfold_threed_20151006/none_probs.h5
#probfile            = /Data/watkinspv/full_datasets/neon_sixfold/mfergus32_ECSpaper_ctx/none_probs.h5
probfile            = /data/CDCU/full_datasets/neon_sixfold/mfergus32_ECSpaper_ctx/none_probs.h5

# Input segmented labels (hdf5)
#gtfile              = /Data/datasets/labels/gt/M0027_11_labels_briggmankl_watkinspv_33x37x7chunks_Forder.h5
gtfile              = /data/CDCU/datasets/labels/gt/M0027_11_labels_briggmankl_watkinspv_33x37x7chunks_Forder.h5

# Input raw EM data
#rawfile             = /Data/datasets/raw/M0027_11_33x37x7chunks_Forder.h5
rawfile             = /data/CDCU/datasets/raw/M0027_11_labels_briggmankl_watkinspv_33x37x7chunks_Forder.h5

# Output agglomerated labels
#outfile             = /home/watkinspv/Data/agglo/none_flatagglo_supervoxels.h5
outfile             = /data/CDCU/agglo/none_flatagglo_supervoxels.h5

# Input probability augmented data
#probaugfile         = /Data/datasets/labels/supervoxels/sixfold_threed_20151006/none_probs_aug.h5
#probaugfile         = /Data/watkinspv/full_datasets/neon_sixfold/mfergus32_ECSpaper_ctx/none_probs.h5
probfile            = /data/CDCU/full_datasets/neon_sixfold/mfergus32_ECSpaper_ctx/none_probs.h5

# Input raw EM augmented data
#rawaugfile          = /Data/datasets/raw/M0027_11_33x37x7chunks_Forder_aug.h5

# Output trained classifier
#trainout            = string(default='out.dill')

# Output trained classifier
#classifierout       = string(default='out_classifier.dill')

##############################
# Optional options
##############################

# Names of the supervoxel label dataset subgroups
label_subgroups      = with_background,0.99999000
#label_subgroups      = zero_background,0.99999000

# Name of the supervoxel label dataset with subgroups
#label_subgroups_out  = with_background,

# Name of the ground truth label dataset
#gt_dataset          = string(default='labels')

# Name of the raw EM dataset
#raw_dataset         = string(default='data_mag1')

# Thresholds for probabilities
#thresholds          = 

# Names of thresholds subgroups to write in outputs (use empty to use thresholds).
# This is basically a hack to compare labels with different thresholds using legacy scripts.
#threshold_subgroups = 0.30000000,0.40000000,0.50000000,0.60000000,0.70000000,0.80000000,0.90000000,0.95000000,0.97500000,0.99000000,0.99500000,0.99900000,0.99950000,0.99990000,0.99995000,0.99999000,0.99999500,0.99999900

# specify number of iterations for iterative prior mode, use zero for normal mode
#iterate_count       = 50
#iterate_count       = 75
iterate_count       = 100

# perform this percentage of mergers on each iteration, never go against sklearn predict().
# use -1 to use sklearn predict() only.
#iterate_merge_perc  = 0.05,
iterate_merge_perc  = 0.02,

##############################
# Options for loading training / testing cubes
##############################

# Set these to use "chunklist" or "chunkrange" mode which loads cubes on-the-fly from different parts of the dataset.
# format is X1,Y1,Z1, X2,Y2,Z2, ...
chunk_range_beg     = 16,17,4, 13,20,3, 13,15,3, 18,15,3, 18,20,3, 18,20,4

# chunk_range_beg is set and end range is empty, then chunk_range_beg are assumed to be single chunks (chunklist mode)
# otherwise these are the ending chunks for the ranges and must be same length as chunk_range_beg (chunkrange mode)
# the range is open on the end, i.e., the chunk at chunk_range_end is NOT included
# format is X1,Y1,Z1, X2,Y2,Z2, ...
#chunk_range_end     = 19,21,3    

# Size of voxels to sample over for random batches
size_list           = 128,128,128
#size_list           = 256,256,128

# define offsets for "chunklist" mode, if this list is empty, defaults to all zeros
# otherwise must be same length as chunk_range_beg/end (offsets per range for chunkrange or per chunk for chunklist)
# format is X1,Y1,Z1, X2,Y2,Z2, ...
offset_list         = 0,0,0   

# list of which chunks to use for test, all other chunks used for train, empty to train only.
# indices are based on flattened range if using chunk_range_end.
#test_chunks         = 0,

# how many edges (total neighbors in region adjacency graph) to allocate per cube
nalloc_per_chunk    = 100000

