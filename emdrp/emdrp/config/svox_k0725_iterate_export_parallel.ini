
# dpSupervoxelClassifier.ini
# ini specification file for supervoxel classifier
# File is meant to be read with configobj python module.
# http://www.voidspace.org.uk/python/articles/configobj.shtml
#
# NOTE: as of version 5.0.6 inline comments do NOT work for specification lines
#   and types need at least ONE argument to not throw a validation error (for required vals, just specify min/max)
#
# Created on Dec 7, 2015, pwatkins

##############################
# Required options
##############################

# Input supervoxel labels (hdf5)
#labelfile           = /Data/watkinspv/full_datasets/neon_sixfold/vgg3pool_k0725/k0725_supervoxels.h5
#labelfile           = /Data/watkinspv/full_datasets/neon/vgg3pool_k0725/k0725_supervoxels.h5
labelfile           = xxx

# Input probability data (hdf5)
#probfile            = /Data/watkinspv/full_datasets/neon_sixfold/vgg3pool_k0725/k0725_probs.h5
#probfile            = /Data/watkinspv/full_datasets/neon/vgg3pool_k0725/k0725_probs.h5
probfile            = /data/CDCU/full_datasets/neon/vgg3pool_k0725_26x40x40/k0725_probs.h5

# Input segmented labels (hdf5)
#gtfile              = /Data/datasets/labels/gt/k0725_labels_benahmedf_2frontendcubes.h5
gtfile              = /data/CDCU/datasets/labels/gt/k0725_labels_benahmedf_2frontendcubes.h5

# Input raw EM data
#rawfile             = /Data/datasets/raw/k0725_8x8x5chunks_at_x0007_y0008_z0002.h5
rawfile             = /data/CDCU/datasets/raw/k0725.h5

# Output agglomerated labels
#outfile             = /home/watkinspv/Data/agglo/flatagglo_supervoxels.h5
outfile             = xxx

# Input probability augmented data
#probaugfile         = /Data/watkinspv/full_datasets/neon_sixfold/vgg3pool_k0725/k0725_probs.h5
#probaugfile         = /Data/watkinspv/full_datasets/neon/vgg3pool_k0725/k0725_probs.h5
probaugfile         = /data/CDCU/full_datasets/neon/vgg3pool_k0725_26x40x40/k0725_probs.h5

# Input raw EM augmented data
#rawaugfile          = /Data/datasets/raw/k0725_8x8x5chunks_at_x0007_y0008_z0002_maug.h5

# Output trained classifier
#trainout            = string(default='out.dill')

# Output trained classifier
classifierout       =

##############################
# Optional options
##############################

# Names of the supervoxel label dataset subgroups
label_subgroups      = with_background,0.99999000

# Name of the supervoxel label dataset with subgroups
#label_subgroups_out  = with_background,

# Name of the ground truth label dataset
#gt_dataset          = string(default='labels')

# Name of the raw EM dataset
#raw_dataset         = string(default='data_mag1')

# Thresholds for probabilities
#thresholds          =

# Names of thresholds subgroups to write in outputs (use empty to use thresholds).
# This is basically a hack to compare labels with different thresholds using legacy scripts.
#threshold_subgroups = 0.30000000,0.40000000,0.50000000,0.60000000,0.70000000,0.80000000,0.90000000,0.95000000,0.97500000,0.99000000,0.99500000,0.99900000,0.99950000,0.99990000,0.99995000,0.99999000,0.99999500,0.99999900

# specify number of iterations for iterative prior mode, use zero for normal mode
#iterate_count       = 50
#iterate_count       = 75
iterate_count       = 48

# perform this percentage of mergers on each iteration, never go against sklearn predict().
# use -1 to use sklearn predict() only.
#iterate_merge_perc  = 0.05,
iterate_merge_perc  = 0.02,

# specify a set of ranges indicating iterations at which to save supervoxels to output.
# default is to save every iteration.
# example:
# iterate_save_ranges = 0 30 5  30 50 2  50 60 1
#   would save every fifth iteration until iter 30, then every 2 until 48, then every iteration until 60
# any remaining iterations are saved every iteration.
iterate_save_ranges = 0 20 10  20 30 5  30 40 2  40 48 1

# whether to include ECS features in the FRAG or not
has_ECS           = False

##############################
# Options for loading training / testing cubes
##############################

# Set these to use "chunklist" or "chunkrange" mode which loads cubes on-the-fly from different parts of the dataset.
# format is X1,Y1,Z1, X2,Y2,Z2, ...
chunk_range_beg     = 8,9,3

# chunk_range_beg is set and end range is empty, then chunk_range_beg are assumed to be single chunks (chunklist mode)
# otherwise these are the ending chunks for the ranges and must be same length as chunk_range_beg (chunkrange mode)
# the range is open on the end, i.e., the chunk at chunk_range_end is NOT included
# format is X1,Y1,Z1, X2,Y2,Z2, ...
#chunk_range_end     = 14,15,6

# Size of voxels to sample over for random batches
size_list           = 768,768,384
#size_list           = 256,256,128

# define offsets for "chunklist" mode, if this list is empty, defaults to all zeros
# otherwise must be same length as chunk_range_beg/end (offsets per range for chunkrange or per chunk for chunklist)
# format is X1,Y1,Z1, X2,Y2,Z2, ...
offset_list         = 0,0,0

# list of which chunks to use for test, all other chunks used for train, empty to train only.
# indices are based on flattened range if using chunk_range_end.
test_chunks         = 0,

# this is intended as an agglomeration export for iterative mode. in iterative mode this uses previously trained
#   classifiers are used to agglomerate over a large volume. this completes all iterations before moving on to
#   the next chunk so that memory is not wasted by having all FRAGs loaded at once.
test_only           = False
#test_only           = True

# how many edges (total neighbors in region adjacency graph) to allocate per cube
nalloc_per_chunk    = 100000

